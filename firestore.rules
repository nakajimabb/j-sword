rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

		function checkRole(role, request) {
			let value = request.auth.token.role;
    	let admin = role == 'admin' && value == 'admin';
      let manager = role == 'manager' && (value == 'admin' || value == 'manager');
      return request.auth != null && (admin || manager);
		}

		function checkSecrecy(resource, request) {
			let secrecy = resource.data.secrecy;
      let chk_public = secrecy == 'public';
      let chk_protected = secrecy == 'protected' && checkRole('manager', request);
      let chk_private = secrecy == 'private' && checkRole('admin', request);
      return chk_public || chk_protected || chk_private;
		}

    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /{path=**}/modules/{docId} {
      allow read: if checkSecrecy(resource, request);
    }
    match /{path=**}/books/{docId} {
      allow read: if resource.data.published || checkRole('admin', request);
      allow write: if checkRole('admin', request);
    }
    match /{path=**}/articles/{docId} {
      allow read: if resource.data.published || checkRole('admin', request);
      allow write: if checkRole('admin', request);
    }
  }
}
